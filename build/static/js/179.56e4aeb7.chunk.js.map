{"version":3,"sources":["views/apps/chatBrands/store/actions/index.js","views/apps/chatBrands/Chat.js","views/apps/chatBrands/SidebarLeft.js","views/apps/chatBrands/UserProfileSidebar.js","views/apps/chatBrands/index.js"],"names":["getChatContacts","dispatch","axios","get","then","res","type","data","selectChat","id","ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","userSidebarLeft","userProfile","selectedUser","chatArea","useRef","useDispatch","useState","msg","setMsg","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","handleSendMsg","e","obj","preventDefault","message","post","contact","ChatWrapper","chat","PerfectScrollbar","className","classnames","onClick","window","innerWidth","size","imgHeight","imgWidth","img","avatar","status","fullName","ref","options","wheelPropagation","chatLog","formattedChatLog","chatMessageSenderId","senderId","undefined","msgGroup","messages","forEach","index","push","time","formattedChatData","map","item","Form","onSubmit","InputGroup","Input","value","onChange","target","placeholder","InputGroupAddon","addonType","InputGroupText","Label","for","hidden","Button","color","SidebarLeft","sidebar","handleUserSidebarLeft","chats","contacts","about","setAbout","query","setQuery","active","setActive","setStatus","filteredChat","setFilteredChat","filteredContacts","setFilteredContacts","handleUserClick","show","role","rows","defaultValue","CustomInput","label","checked","name","defaultChecked","searchFilterFunction","toLowerCase","includes","filteredChatsArr","filter","filteredContactssArr","formatDateToMonthShort","lastMessage","Date","CardText","unseenMsgs","Badge","pill","UserProfileSidebar","user","userSidebarRight","AppChat","useSelector","state","setUser","setSidebar","setUserSidebarRight","setUserSidebarLeft","Chat"],"mappings":"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","file":"static/js/179.56e4aeb7.chunk.js","sourcesContent":["import axios from 'axios'\n\n// ** Get User Profile\nexport const getUserProfile = () => {\n  return dispatch => {\n    return axios.get('/apps/chatBrands/users/profile-user').then(res => {\n      return dispatch({\n        type: 'GET_USER_PROFILE',\n        userProfile: res.data\n      })\n    })\n  }\n}\n\n// ** Get Chats & Contacts\nexport const getChatContacts = () => {\n  return dispatch => {\n    axios.get('/apps/chatBrands/chats-and-contacts').then(res => {\n      dispatch({\n        type: 'GET_CHAT_CONTACTS',\n        data: res.data\n      })\n    })\n  }\n}\n\n// ** Select Chat\nexport const selectChat = id => {\n  return dispatch => {\n    axios.get('/apps/chatBrands/get-chat', { id }).then(res => {\n      dispatch({ type: 'SELECT_CHAT', data: res.data })\n      dispatch(getChatContacts())\n    })\n  }\n}\n\n// ** Send Msg\nexport const sendMsg = obj => {\n  return dispatch => {\n    axios.post('/apps/chatBrands/send-msg', { obj }).then(res => {\n      dispatch({ type: 'SEND_MSG', data: res.data })\n      dispatch(selectChat(obj.contact.id))\n    })\n  }\n}\n","// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport ReactDOM from 'react-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { sendMsg } from './store/actions'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { MessageSquare, Menu, PhoneCall, Video, Search, MoreVertical, Mic, Image, Send } from 'react-feather'\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Form,\n  Label,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  InputGroupText,\n  Button\n} from 'reactstrap'\n\nconst ChatLog = props => {\n  // ** Props & Store\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\n  const { userProfile, selectedUser } = store\n\n  // ** Refs & Dispatch\n  const chatArea = useRef(null)\n  const dispatch = useDispatch()\n\n  // ** State\n  const [msg, setMsg] = useState('')\n\n  // ** Scroll to chat bottom\n  const scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n\n  // ** If user chat is not empty scrollToBottom\n  useEffect(() => {\n    const selectedUserLen = Object.keys(selectedUser).length\n\n    if (selectedUserLen) {\n      scrollToBottom()\n    }\n  }, [selectedUser])\n\n  // ** Formats chat data based on sender\n  const formattedChatData = () => {\n    let chatLog = []\n    if (selectedUser.chat) {\n      chatLog = selectedUser.chat.chat\n    }\n\n    const formattedChatLog = []\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\n    let msgGroup = {\n      senderId: chatMessageSenderId,\n      messages: []\n    }\n    chatLog.forEach((msg, index) => {\n      if (chatMessageSenderId === msg.senderId) {\n        msgGroup.messages.push({\n          msg: msg.message,\n          time: msg.time\n        })\n      } else {\n        chatMessageSenderId = msg.senderId\n        formattedChatLog.push(msgGroup)\n        msgGroup = {\n          senderId: msg.senderId,\n          messages: [\n            {\n              msg: msg.message,\n              time: msg.time\n            }\n          ]\n        }\n      }\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\n    })\n    return formattedChatLog\n  }\n\n  // ** Renders user chat\n  const renderChats = () => {\n    return formattedChatData().map((item, index) => {\n      return (\n        <div\n          key={index}\n          className={classnames('chat', {\n            'chat-left': item.senderId !== 11\n          })}\n        >\n          <div className='chat-avatar'>\n            <Avatar\n              className='box-shadow-1 cursor-pointer'\n              img={item.senderId === 11 ? userProfile.avatar : selectedUser.contact.avatar}\n            />\n          </div>\n\n          <div className='chat-body'>\n            {item.messages.map(chat => (\n              <div key={chat.msg} className='chat-content'>\n                <p>{chat.msg}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    })\n  }\n\n  // ** Opens right sidebar & handles its data\n  const handleAvatarClick = obj => {\n    handleUserSidebarRight()\n    handleUser(obj)\n  }\n\n  // ** On mobile screen open left sidebar on Start Conversation Click\n  const handleStartConversation = () => {\n    if (!Object.keys(selectedUser).length && !userSidebarLeft && window.innerWidth <= 1200) {\n      handleSidebar()\n    }\n  }\n\n  // ** Sends New Msg\n  const handleSendMsg = e => {\n    e.preventDefault()\n    if (msg.length) {\n      dispatch(sendMsg({ ...selectedUser, message: msg }))\n      setMsg('')\n    }\n  }\n\n  // ** ChatWrapper tag based on chat's length\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\n\n  return (\n    <div className='chat-app-window'>\n      <div className={classnames('start-chat-area', { 'd-none': Object.keys(selectedUser).length })}>\n        <div className='start-chat-icon mb-1'>\n          <MessageSquare />\n        </div>\n        <h4 className='sidebar-toggle start-chat-text' onClick={handleStartConversation}>\n          Start Conversation\n        </h4>\n      </div>\n      {Object.keys(selectedUser).length ? (\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\n          <div className='chat-navbar'>\n            <header className='chat-header'>\n              <div className='d-flex align-items-center'>\n                <div className='sidebar-toggle d-block d-lg-none mr-1' onClick={handleSidebar}>\n                  <Menu size={21} />\n                </div>\n                <Avatar\n                  imgHeight='36'\n                  imgWidth='36'\n                  img={selectedUser.contact.avatar}\n                  status={selectedUser.contact.status}\n                  className='avatar-border user-profile-toggle m-0 mr-1'\n                  onClick={() => handleAvatarClick(selectedUser.contact)}\n                />\n                <h6 className='mb-0'>{selectedUser.contact.fullName}</h6>\n              </div>\n              {/* <div className='d-flex align-items-center'>\n                <PhoneCall size={18} className='cursor-pointer d-sm-block d-none mr-1' />\n                <Video size={18} className='cursor-pointer d-sm-block d-none mr-1' />\n                <Search size={18} className='cursor-pointer d-sm-block d-none' />\n                <UncontrolledDropdown>\n                  <DropdownToggle className='btn-icon' color='transparent' size='sm'>\n                    <MoreVertical size='18' />\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      View Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Mute Notifications\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Block Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Clear Chat\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Report\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div> */}\n            </header>\n          </div>\n\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\n          </ChatWrapper>\n\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\n            <InputGroup className='input-group-merge mr-1 form-send-message'>\n              {/* <InputGroupAddon addonType='prepend'>\n                <InputGroupText>\n                  <Mic className='cursor-pointer' size={14} />\n                </InputGroupText>\n              </InputGroupAddon> */}\n              <Input\n                value={msg}\n                onChange={e => setMsg(e.target.value)}\n                placeholder='Type your message'\n              />\n              <InputGroupAddon addonType='append'>\n                <InputGroupText>\n                  <Label className='attachment-icon mb-0' for='attach-doc'>\n                    <Image className='cursor-pointer text-secondary' size={14} />\n                    <input type='file' id='attach-doc' hidden />\n                  </Label>\n                </InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n            <Button className='send' color='primary'>\n              <Send size={14} className='d-lg-none' />\n              <span className='d-none d-lg-block'>Send</span>\n            </Button>\n          </Form>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ChatLog\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { selectChat } from './store/actions'\n\n// ** Utils\nimport { formatDateToMonthShort } from '@utils'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, Search, CheckSquare, Bell, User, Trash } from 'react-feather'\nimport { CardText, InputGroup, InputGroupAddon, Input, InputGroupText, Badge, CustomInput, Button } from 'reactstrap'\n\nconst SidebarLeft = props => {\n  // ** Props & Store\n  const { store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft } = props\n  const { chats, contacts, userProfile } = store\n\n  // ** Dispatch\n  const dispatch = useDispatch()\n\n  // ** State\n  const [about, setAbout] = useState('')\n  const [query, setQuery] = useState('')\n  const [active, setActive] = useState({})\n  const [status, setStatus] = useState('online')\n  const [filteredChat, setFilteredChat] = useState([])\n  const [filteredContacts, setFilteredContacts] = useState([])\n\n  // ** Handles User Chat Click\n  const handleUserClick = (type, id) => {\n    dispatch(selectChat(id))\n    setActive({ type, id })\n    if (sidebar === true) {\n      handleSidebar()\n    }\n  }\n\n  // ** Renders Chat\n  const renderChats = () => {\n    if (chats && chats.length) {\n      if (query.length && !filteredChat.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredChat.length ? filteredChat : chats\n\n        return arrToMap.map(item => {\n          const time = formatDateToMonthShort(item.chat.lastMessage ? item.chat.lastMessage.time : new Date())\n\n          return (\n            <li\n              className={classnames({\n                active: active.type === 'chat' && active.id === item.id\n              })}\n              key={item.id}\n              onClick={() => handleUserClick('chat', item.id)}\n            >\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' status={item.status} />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>\n                  {item.chat.lastMessage ? item.chat.lastMessage.message : chats[chats.length - 1].message}\n                </CardText>\n              </div>\n              <div className='chat-meta text-nowrap'>\n                <small className='float-right mb-25 chat-time ml-25'>{time}</small>\n                {item.chat.unseenMsgs >= 1 ? (\n                  <Badge className='float-right' color='danger' pill>\n                    {item.chat.unseenMsgs}\n                  </Badge>\n                ) : null}\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Renders Contact\n  const renderContacts = () => {\n    if (contacts && contacts.length) {\n      if (query.length && !filteredContacts.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredContacts.length ? filteredContacts : contacts\n        return arrToMap.map(item => {\n          return (\n            <li\n              className={classnames({\n                active: active.type === 'contact' && active.id === item.id\n              })}\n              key={item.fullName}\n              onClick={() => handleUserClick('contact', item.id)}\n            >\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>{item.about}</CardText>\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Handles Filter\n  const handleFilter = e => {\n    setQuery(e.target.value)\n    const searchFilterFunction = contact => contact.fullName.toLowerCase().includes(e.target.value.toLowerCase())\n    const filteredChatsArr = chats.filter(searchFilterFunction)\n    const filteredContactssArr = contacts.filter(searchFilterFunction)\n    setFilteredChat([...filteredChatsArr])\n    setFilteredContacts([...filteredContactssArr])\n  }\n\n  return store ? (\n    <div className='sidebar-left'>\n      <div className='sidebar'>\n        <div\n          className={classnames('chat-profile-sidebar', {\n            show: userSidebarLeft\n          })}\n        >\n          <header className='chat-profile-header'>\n            <div className='close-icon' onClick={handleUserSidebarLeft}>\n              <X size={14} />\n            </div>\n            <div className='header-profile-sidebar'>\n              <Avatar className='box-shadow-1 avatar-border' img={userProfile.avatar} status={status} size='xl' />\n              <h4 className='chat-user-name'>{userProfile.fullName}</h4>\n              <span className='user-post'>{userProfile.role}</span>\n            </div>\n          </header>\n          <PerfectScrollbar className='profile-sidebar-area' options={{ wheelPropagation: false }}>\n            <h6 className='section-label mb-1'>About</h6>\n            <div className='about-user'>\n              <Input\n                rows='5'\n                defaultValue={userProfile.about}\n                type='textarea'\n                onChange={e => setAbout(e.target.value)}\n                className={classnames('char-textarea', {\n                  'text-danger': about && about.length > 120\n                })}\n              />\n              <small className='counter-value float-right'>\n                <span className='char-count'>{userProfile.about ? userProfile.about.length : 0}</span>/ 120\n              </small>\n            </div>\n            <h6 className='section-label mb-1 mt-3'>Status</h6>\n            <ul className='list-unstyled user-status'>\n              <li className='pb-1'>\n                <CustomInput\n                  type='radio'\n                  className='custom-control-primary'\n                  id='online'\n                  label='Online'\n                  onChange={e => setStatus('online')}\n                  checked={status === 'online'}\n                />\n              </li>\n              <li className='pb-1'>\n                <CustomInput\n                  type='radio'\n                  className='custom-control-danger'\n                  id='busy'\n                  label='Do Not Disturb'\n                  onChange={e => setStatus('busy')}\n                  checked={status === 'busy'}\n                />\n              </li>\n              <li className='pb-1'>\n                <CustomInput\n                  type='radio'\n                  className='custom-control-warning'\n                  id='away'\n                  label='Away'\n                  onChange={e => setStatus('away')}\n                  checked={status === 'away'}\n                />\n              </li>\n              <li className='pb-1'>\n                <CustomInput\n                  type='radio'\n                  className='custom-control-secondary'\n                  id='offline'\n                  label='Offline'\n                  onChange={e => setStatus('offline')}\n                  checked={status === 'offline'}\n                />\n              </li>\n            </ul>\n            <h6 className='section-label mb-1 mt-2'>Settings</h6>\n            <ul className='list-unstyled'>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <CheckSquare className='mr-75' size='18' />\n                  <span className='align-middle'>Two-step Verification</span>\n                </div>\n                <CustomInput type='switch' id='verification' name='verification' label='' defaultChecked />\n              </li>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <Bell className='mr-75' size='18' />\n                  <span className='align-middle'>Notification</span>\n                </div>\n                <CustomInput type='switch' id='notifications' name='notifications' label='' />\n              </li>\n              <li className='d-flex align-items-center cursor-pointer mb-1'>\n                <User className='mr-75' size='18' />\n                <span className='align-middle'>Invite Friends</span>\n              </li>\n              <li className='d-flex align-items-center cursor-pointer'>\n                <Trash className='mr-75' size='18' />\n                <span className='align-middle'>Delete Account</span>\n              </li>\n            </ul>\n            <div className='mt-3'>\n              <Button color='primary'>Logout</Button>\n            </div>\n          </PerfectScrollbar>\n        </div>\n        <div\n          className={classnames('sidebar-content', {\n            show: sidebar === true\n          })}\n        >\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\n            <X size={14} />\n          </div>\n          <div className='chat-fixed-search'>\n            <div className='d-flex align-items-center w-100'>\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\n                {Object.keys(userProfile).length ? (\n                  <Avatar\n                    className='avatar-border'\n                    img={userProfile.avatar}\n                    status={status}\n                    imgHeight='42'\n                    imgWidth='42'\n                  />\n                ) : null}\n              </div>\n              <InputGroup className='input-group-merge ml-1 w-100'>\n                <InputGroupAddon addonType='prepend'>\n                  <InputGroupText className='round'>\n                    <Search className='text-muted' size={14} />\n                  </InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  value={query}\n                  className='round'\n                  placeholder='Search or start a new chat'\n                  onChange={handleFilter}\n                />\n              </InputGroup>\n            </div>\n          </div>\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\n            <h4 className='chat-list-title'>Chats</h4>\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\n            <h4 className='chat-list-title'>Contacts</h4>\n            <ul className='chat-users-list contact-list media-list'>{renderContacts()}</ul>\n          </PerfectScrollbar>\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nexport default SidebarLeft\n","// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, Mail, PhoneCall, Clock, Tag, Star, Image, Trash, Slash } from 'react-feather'\n\nconst UserProfileSidebar = props => {\n  // ** Props\n  const { user, handleUserSidebarRight, userSidebarRight } = props\n\n  return (\n    <div className={classnames('user-profile-sidebar', { show: userSidebarRight === true })}>\n      <header className='user-profile-header'>\n        <span className='close-icon' onClick={handleUserSidebarRight}>\n          <X size={14} />\n        </span>\n        <div className='header-profile-sidebar'>\n          <Avatar\n            className='box-shadow-1 avatar-border'\n            size='xl'\n            status={user.status}\n            img={user.avatar}\n            imgHeight='70'\n            imgWidth='70'\n          />\n          <h4 className='chat-user-name'>{user.fullName}</h4>\n          <span className='user-post'>{user.role}</span>\n        </div>\n      </header>\n      <PerfectScrollbar className='user-profile-sidebar-area' options={{ wheelPropagation: false }}>\n        <h6 className='section-label mb-1'>About</h6>\n        <p>{user.about}</p>\n        <div className='personal-info'>\n          <h6 className='section-label mb-1 mt-3'>Personal Information</h6>\n          <ul className='list-unstyled'>\n            <li className='mb-1'>\n              <Mail className='mr-50' size={17} />\n              <span className='align-middle'>lucifer@email.com</span>\n            </li>\n            <li className='mb-1'>\n              <PhoneCall className='mr-50' size={17} />\n              <span className='align-middle'> +1(123) 456 - 7890</span>\n            </li>\n            <li>\n              <Clock className='mr-50' size={17} />\n              <span className='align-middle'> Mon - Fri 10AM - 8PM</span>\n            </li>\n          </ul>\n        </div>\n        {/* <div className='more-options'>\n          <h6 className='section-label mb-1 mt-3'>Options</h6>\n          <ul className='list-unstyled'>\n            <li className='cursor-pointer mb-1'>\n              <Tag className='mr-50' size={17} />\n              <span className='align-middle'> Add Tag</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Star className='mr-50' size={17} />\n              <span className='align-middle'> Important Contact</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Image className='mr-50' size={17} />\n              <span className='align-middle'> Shared Media</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Trash className='mr-50' size={17} />\n              <span className='align-middle'> Delete Contact</span>\n            </li>\n            <li className='cursor-pointer'>\n              <Slash className='mr-50' size={17} />\n              <span className='align-middle'>Block Contact</span>\n            </li>\n          </ul>\n        </div> */}\n      </PerfectScrollbar>\n    </div>\n  )\n}\n\nexport default UserProfileSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Chat App Component Imports\nimport Chat from './Chat'\nimport Sidebar from './SidebarLeft'\nimport UserProfileSidebar from './UserProfileSidebar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserProfile, getChatContacts } from './store/actions'\n\nimport '@styles/base/pages/app-chat.scss'\nimport '@styles/base/pages/app-chat-list.scss'\n\nconst AppChat = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.chat)\n\n  // ** States\n  const [user, setUser] = useState({})\n  const [sidebar, setSidebar] = useState(false)\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\n\n  // ** Sidebar & overlay toggle functions\n  const handleSidebar = () => setSidebar(!sidebar)\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\n  const handleOverlayClick = () => {\n    setSidebar(false)\n    setUserSidebarRight(false)\n    setUserSidebarLeft(false)\n  }\n\n  // ** Set user function for Right Sidebar\n  const handleUser = obj => setUser(obj)\n\n  // ** Get data on Mount\n  useEffect(() => {\n    dispatch(getChatContacts())\n    dispatch(getUserProfile())\n  }, [dispatch])\n\n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        sidebar={sidebar}\n        handleSidebar={handleSidebar}\n        userSidebarLeft={userSidebarLeft}\n        handleUserSidebarLeft={handleUserSidebarLeft}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\n              })}\n              onClick={handleOverlayClick}\n            ></div>\n            <Chat\n              store={store}\n              handleUser={handleUser}\n              handleSidebar={handleSidebar}\n              userSidebarLeft={userSidebarLeft}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n            <UserProfileSidebar\n              user={user}\n              userSidebarRight={userSidebarRight}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default AppChat\n"],"sourceRoot":""}