{"version":3,"sources":["views/apps/calendarBrands/Calendar.js","views/apps/calendarBrands/AddEventSidebar.js","views/apps/calendarBrands/store/actions/index.js","views/apps/calendarBrands/index.js","assets/images/pages/calendar-illustration.png"],"names":["ToastComponent","title","icon","color","className","size","Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","calendarEvent","event","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction","Card","CardBody","memo","AddEventSidebar","open","refetchEvents","addEvent","removeEvent","selectedEvent","useForm","register","errors","handleSubmit","useState","url","setUrl","desc","setDesc","setTitle","guests","setGuests","allDay","setAllDay","location","setLocation","Date","endPicker","setEndPicker","startPicker","setStartPicker","value","label","setValue","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","id","description","updatedEventData","propsToUpdate","extendedPropsToUpdate","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","handleDeleteEvent","eventId","remove","error","EventActions","isObjEmpty","Button","Ripple","type","onClick","outline","CloseBtn","Modal","isOpen","toggle","contentClassName","onOpened","onClosed","modalClassName","ModalHeader","close","tag","ModalBody","Form","onSubmit","data","obj","display","undefined","handleAddEvent","FormGroup","Label","for","Input","name","placeholder","onChange","e","target","innerRef","validate","classnames","options","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","required","enableTime","dateFormat","CustomInput","checked","inline","isMulti","img","rows","fetchEvents","calendars","axios","get","then","response","getState","post","selectedCalendars","delete","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","Row","noGutters","Col","show"],"mappings":"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","file":"static/js/156.f39c5f66.chunk.js","sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { toast } from 'react-toastify'\nimport { Card, CardBody } from 'reactstrap'\nimport { Menu, Check } from 'react-feather'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { toast } from 'react-toastify'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Check, Trash } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Label, CustomInput, Input, Form } from 'reactstrap'\n\n// ** Utils\nimport { selectThemeColors, isObjEmpty } from '@utils'\n\n// ** Avatar Images\nimport img1 from '@src/assets/images/avatars/1-small.png'\nimport img2 from '@src/assets/images/avatars/3-small.png'\nimport img3 from '@src/assets/images/avatars/5-small.png'\nimport img4 from '@src/assets/images/avatars/7-small.png'\nimport img5 from '@src/assets/images/avatars/9-small.png'\nimport img6 from '@src/assets/images/avatars/11-small.png'\n\n// ** Styles Imports\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst AddEventSidebar = props => {\n  // ** Props\n  const {\n    store,\n    dispatch,\n    open,\n    handleAddEventSidebar,\n    calendarsColor,\n    calendarApi,\n    refetchEvents,\n    addEvent,\n    selectEvent,\n    updateEvent,\n    removeEvent\n  } = props\n\n  // ** Vars\n  const selectedEvent = store.selectedEvent\n  const { register, errors, handleSubmit } = useForm()\n\n  // ** States\n  const [url, setUrl] = useState('')\n  const [desc, setDesc] = useState('')\n  const [title, setTitle] = useState('')\n  const [guests, setGuests] = useState({})\n  const [allDay, setAllDay] = useState(false)\n  const [location, setLocation] = useState('')\n  const [endPicker, setEndPicker] = useState(new Date())\n  const [startPicker, setStartPicker] = useState(new Date())\n  const [value, setValue] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\n\n  // ** Select Options\n  const options = [\n    { value: 'Business', label: 'Business', color: 'primary' },\n    { value: 'Personal', label: 'Personal', color: 'danger' },\n    { value: 'Family', label: 'Family', color: 'warning' },\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\n    { value: 'ETC', label: 'ETC', color: 'info' }\n  ]\n\n  const guestsOptions = [\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\n  ]\n\n  // ** Custom select components\n  const OptionComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <span className={`bullet bullet-${data.color} bullet-sm mr-50`}></span>\n        {data.label}\n      </components.Option>\n    )\n  }\n\n  const GuestsComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex flex-wrap align-items-center'>\n          <Avatar className='my-0 mr-1' size='sm' img={data.avatar} />\n          <div>{data.label}</div>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Adds New Event\n  const handleAddEvent = () => {\n    const obj = {\n      title,\n      start: startPicker,\n      end: endPicker,\n      allDay,\n      display: 'block',\n      extendedProps: {\n        calendar: value[0].label,\n        url: url.length ? url : undefined,\n        guests: guests.length ? guests : undefined,\n        location: location.length ? location : undefined,\n        desc: desc.length ? desc : undefined\n      }\n    }\n    dispatch(addEvent(obj))\n    refetchEvents()\n    handleAddEventSidebar()\n    toast.success(<ToastComponent title='Event Added' color='success' icon={<Check />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** Reset Input Values on Close\n  const handleResetInputValues = () => {\n    dispatch(selectEvent({}))\n    setTitle('')\n    setAllDay(false)\n    setUrl('')\n    setLocation('')\n    setDesc('')\n    setGuests({})\n    setValue([{ value: 'Business', label: 'Business', color: 'primary' }])\n    setStartPicker(new Date())\n    setEndPicker(new Date())\n  }\n\n  // ** Set sidebar fields\n  const handleSelectedEvent = () => {\n    if (!isObjEmpty(selectedEvent)) {\n      const calendar = selectedEvent.extendedProps.calendar\n\n      const resolveLabel = () => {\n        if (calendar.length) {\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\n        } else {\n          return { value: 'Business', label: 'Business', color: 'primary' }\n        }\n      }\n      setTitle(selectedEvent.title || title)\n      setAllDay(selectedEvent.allDay || allDay)\n      setUrl(selectedEvent.url || url)\n      setLocation(selectedEvent.extendedProps.location || location)\n      setDesc(selectedEvent.extendedProps.description || desc)\n      setGuests(selectedEvent.extendedProps.guests || guests)\n      setStartPicker(new Date(selectedEvent.start))\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\n      setValue([resolveLabel()])\n    }\n  }\n\n  // ** (UI) updateEventInCalendar\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\n\n    // ** Set event properties except date related\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < propsToUpdate.length; index++) {\n      const propName = propsToUpdate[index]\n      existingEvent.setProp(propName, updatedEventData[propName])\n    }\n\n    // ** Set date related props\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\n    existingEvent.setDates(updatedEventData.start, updatedEventData.end, { allDay: updatedEventData.allDay })\n\n    // ** Set event's extendedProps\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\n      const propName = extendedPropsToUpdate[index]\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\n    }\n  }\n\n  // ** Updates Event in Store\n  const handleUpdateEvent = () => {\n    const eventToUpdate = {\n      id: selectedEvent.id,\n      title,\n      allDay,\n      start: startPicker,\n      end: endPicker,\n      url,\n      extendedProps: {\n        location,\n        description: desc,\n        guests,\n        calendar: value[0].label\n      }\n    }\n\n    const propsToUpdate = ['id', 'title', 'url']\n    const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\n\n    dispatch(updateEvent(eventToUpdate))\n    updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\n    handleAddEventSidebar()\n    toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** (UI) removeEventInCalendar\n  const removeEventInCalendar = eventId => {\n    calendarApi.getEventById(eventId).remove()\n  }\n  const handleDeleteEvent = () => {\n    dispatch(removeEvent(selectedEvent.id))\n    removeEventInCalendar(selectedEvent.id)\n    handleAddEventSidebar()\n    toast.error(<ToastComponent title='Event Removed' color='danger' icon={<Trash />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** Event Action buttons\n  const EventActions = () => {\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n      return (\n        <Fragment>\n          <Button.Ripple className='mr-1' type='submit' color='primary'>\n            Add\n          </Button.Ripple>\n          <Button.Ripple color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\n            Cancel\n          </Button.Ripple>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button.Ripple\n            className='mr-1'\n            color='primary'\n            // onClick={handleUpdateEvent}\n          >\n            Update\n          </Button.Ripple>\n          <Button.Ripple color='danger' onClick={handleDeleteEvent} outline>\n            Delete\n          </Button.Ripple>\n        </Fragment>\n      )\n    }\n  }\n\n  // ** Close BTN\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleAddEventSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSelectedEvent}\n      onClosed={handleResetInputValues}\n      modalClassName='modal-slide-in event-sidebar'\n    >\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\n        <h5 className='modal-title'>\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\n        </h5>\n      </ModalHeader>\n      <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n        <Form\n          onSubmit={handleSubmit(data => {\n            if (isObjEmpty(errors)) {\n              if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n                handleAddEvent()\n              } else {\n                handleUpdateEvent()\n              }\n              handleAddEventSidebar()\n            }\n          })}\n        >\n          <FormGroup>\n            <Label for='title'>\n              Title <span className='text-danger'>*</span>\n            </Label>\n            <Input\n              id='title'\n              name='title'\n              placeholder='Title'\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n              innerRef={register({ register: true, validate: value => value !== '' })}\n              className={classnames({\n                'is-invalid': errors.title\n              })}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='label'>Label</Label>\n            <Select\n              id='label'\n              value={value}\n              options={options}\n              theme={selectThemeColors}\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              onChange={data => setValue([data])}\n              components={{\n                Option: OptionComponent\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='startDate'>Start Date</Label>\n            <Flatpickr\n              required\n              id='startDate'\n              // tag={Flatpickr}\n              name='startDate'\n              className='form-control'\n              onChange={date => setStartPicker(date[0])}\n              value={startPicker}\n              options={{\n                enableTime: allDay === false,\n                dateFormat: 'Y-m-d H:i'\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='endDate'>End Date</Label>\n            <Flatpickr\n              required\n              id='endDate'\n              // tag={Flatpickr}\n              name='endDate'\n              className='form-control'\n              onChange={date => setEndPicker(date[0])}\n              value={endPicker}\n              options={{\n                enableTime: allDay === false,\n                dateFormat: 'Y-m-d H:i'\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <CustomInput\n              type='switch'\n              id='allDay'\n              name='customSwitch'\n              label='All Day'\n              checked={allDay}\n              onChange={e => setAllDay(e.target.checked)}\n              inline\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='eventURL'>Event URL</Label>\n            <Input\n              type='url'\n              id='eventURL'\n              value={url}\n              onChange={e => setUrl(e.target.value)}\n              placeholder='https://www.google.com'\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='guests'>Guests</Label>\n            <Select\n              isMulti\n              id='guests'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={guestsOptions}\n              theme={selectThemeColors}\n              value={guests.length ? [...guests] : null}\n              onChange={data => setGuests([...data])}\n              components={{\n                Option: GuestsComponent\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='location'>Location</Label>\n            <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='description'>Description</Label>\n            <Input\n              type='textarea'\n              name='text'\n              id='description'\n              rows='3'\n              value={desc}\n              onChange={e => setDesc(e.target.value)}\n              placeholder='Description'\n            />\n          </FormGroup>\n          <FormGroup className='d-flex'>\n            <EventActions />\n          </FormGroup>\n        </Form>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default AddEventSidebar\n","import axios from 'axios'\n\n// ** Fetch Events\nexport const fetchEvents = calendars => {\n  return dispatch => {\n    axios.get('/apps/calendarBrands/events', { calendars }).then(response => {\n      dispatch({\n        type: 'FETCH_EVENTS',\n        events: response.data\n      })\n    })\n  }\n}\n\n// ** Add Event\nexport const addEvent = event => {\n  return (dispatch, getState) => {\n    axios.post('/apps/calendarBrands/add-event', { event }).then(() => {\n      dispatch({\n        type: 'ADD_EVENT'\n      })\n      dispatch(fetchEvents(getState().calendar.selectedCalendars))\n    })\n  }\n}\n\n// ** Update Event\nexport const updateEvent = event => {\n  return dispatch => {\n    axios.post('/apps/calendarBrands/update-event', { event }).then(() => {\n      dispatch({\n        type: 'UPDATE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Filter Events\nexport const updateFilter = filter => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_FILTERS',\n      filter\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** Add/Remove All Filters\nexport const updateAllFilters = value => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_ALL_FILTERS',\n      value\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** remove Event\nexport const removeEvent = id => {\n  return dispatch => {\n    axios.delete('/apps/calendarBrands/remove-event', { id }).then(() => {\n      dispatch({\n        type: 'REMOVE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Select Event (get event data on click)\nexport const selectEvent = event => {\n  return dispatch => {\n    dispatch({\n      type: 'SELECT_EVENT',\n      event\n    })\n  }\n}\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\nimport AddEventSidebar from './AddEventSidebar'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  fetchEvents,\n  selectEvent,\n  updateEvent,\n  updateFilter,\n  updateAllFilters,\n  addEvent,\n  removeEvent\n} from './store/actions/index'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\n\n// ** CalendarColors\nconst calendarsColor = {\n  Business: 'primary',\n  Holiday: 'success',\n  Personal: 'danger',\n  Family: 'warning',\n  ETC: 'info'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false),\n    [leftSidebarOpen, setLeftSidebarOpen] = useState(false),\n    [calendarApi, setCalendarApi] = useState(null)\n\n  // ** Hooks\n  const [isRtl, setIsRtl] = useRTL()\n\n  // ** AddEventSidebar Toggle Function\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\n\n  // ** LeftSidebar Toggle Function\n  const toggleSidebar = val => setLeftSidebarOpen(val)\n\n  // ** Blank Event Object\n  const blankEvent = {\n    title: '',\n    start: '',\n    end: '',\n    allDay: false,\n    url: '',\n    extendedProps: {\n      calendar: '',\n      guests: [],\n      location: '',\n      description: ''\n    }\n  }\n\n  // ** refetchEvents\n  const refetchEvents = () => {\n    if (calendarApi !== null) {\n      calendarApi.refetchEvents()\n    }\n  }\n\n  // ** Fetch Events On Mount\n  useEffect(() => {\n    dispatch(fetchEvents(store.selectedCalendars))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row noGutters>\n          {/* <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\n              show: leftSidebarOpen\n            })}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}\n              updateFilter={updateFilter}\n              toggleSidebar={toggleSidebar}\n              updateAllFilters={updateAllFilters}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col> */}\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              blankEvent={blankEvent}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              toggleSidebar={toggleSidebar}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <div\n            className={classnames('body-content-overlay', {\n              show: leftSidebarOpen === true\n            })}\n            onClick={() => toggleSidebar(false)}\n          ></div>\n        </Row>\n      </div>\n      <AddEventSidebar\n        store={store}\n        dispatch={dispatch}\n        addEvent={addEvent}\n        open={addSidebarOpen}\n        selectEvent={selectEvent}\n        updateEvent={updateEvent}\n        removeEvent={removeEvent}\n        calendarApi={calendarApi}\n        refetchEvents={refetchEvents}\n        calendarsColor={calendarsColor}\n        handleAddEventSidebar={handleAddEventSidebar}\n      />\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}